<?php

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Crux\Request Namespace ///////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace Crux\Request;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Imports //////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

use Crux\Core;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Crux\Request\Route Class Definition ///////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Route
{
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Protected Properties /////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/**
	 * This property contains the Endpoint handler for this route
	 * @access protected
	 * @name \Crux\Request\Route::$mEndpoint
	 * @package \Crux\Request\Route
	 * @var \Crux\Request\Endpoint
	 */
	protected $mEndpoint;

	/**
	 * This property contains the method to call on the Endpoint handler
	 * @access protected
	 * @name \Crux\Request\Route::$mMethod
	 * @package \Crux\Request\Route
	 * @var string
	 */
	protected $mMethod = '';

	/**
	 * This property contains the regular expression pattern to match the route with
	 * @access protected
	 * @name \Crux\Request\Route::$mPattern
	 * @package \Crux\Request\Route
	 * @var string
	 */
	protected $mPattern = '';

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Constructor //////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/**
	 * This method instantiates a new route object
	 * @access public
	 * @name \Crux\Request\Route::__construct()
	 * @package \Crux\Request\Route
	 * @param \Crux\Request\Endpoint $rteHandler
	 * @param string $strMethod
	 * @param string $strPattern
	 */
	public function __construct(Endpoint $rteHandler, string $strMethod, string $strPattern)
	{
		// Set the endpoint handler into the instance
		$this->mEndpoint = $rteHandler;
		// Set the endpoint handler method into the instance
		$this->mMethod = $strMethod;
		// Set the route match pattern into the instance
		$this->mPattern = $strPattern;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Public Methods ///////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/**
	 * This method returns the route endpoint handler from the instance with the ability to reset it inline
	 * @access public
	 * @name \Crux\Request\Route::endpoint()
	 * @package \Crux\Request\Route
	 * @param \Crux\Request\Endpoint $rteHandler [null]
	 * @return \Crux\Request\Endpoint
	 * @uses \Crux\Core\Is::null()
	 */
	public function endpoint(Endpoint $rteHandler = null) : Endpoint
	{
		// Check for a provided endpoint handler
		if (!Core\Is::null($rteHandler)) {
			// Reset the route handler into the instance
			$this->mEndpoint = $rteHandler;
		}
		// Return the endpoint handler from the instance
		return $this->mEndpoint;
	}

	/**
	 * This method returns the route handler method name from the instance with the ability to reset it inline
	 * @access public
	 * @name \Crux\Request\Route::method()
	 * @package \Crux\Request\Route
	 * @param string $strMethod ['']
	 * @return string
	 * @uses \Crux\Core\Is::empty()
	 */
	public function method(string $strMethod = '') : string
	{
		// Check for a provided method
		if (!Core\Is::empty($strMethod)) {
			// Reset the method into the instance
			$this->mMethod = $strMethod;
		}
		// Return the method from the instance
		return $this->mMethod;
	}

	/**
	 * This method returns the route match pattern from the instance with the ability to reset it inline
	 * @access public
	 * @name \Crux\Request\Route::pattern()
	 * @package \Crux\Request\Route
	 * @param string $strPattern ['']
	 * @return string
	 * @uses \Crux\Core\Is::empty()
	 */
	public function pattern(string $strPattern = '') : string
	{
		// Check for a provided pattern
		if (!Core\Is::empty($strPattern)) {
			// Reset the pattern into the instance
			$this->mPattern = $strPattern;
		}
		// Return the pattern from the instance
		return $this->mPattern;
	}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
} /// End Crux\Request\Route Class Definition ////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
