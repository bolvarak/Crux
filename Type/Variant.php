<?php

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Crux\Type Namespace //////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace Crux\Type;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Imports //////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

use Crux\Core\Exception\Type;
use Crux\Core\Is;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Crux\Type\Variant Trait Definition ///////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

trait Variant
{
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Factory //////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/**
	 * This method constructs a new variant from an existing variable
	 * @access public
	 * @name \Crux\Type\Variant\Scalar::Factory()
	 * @package \Crux\Type\Variant\Scalar
	 * @param mixed|null $mixSource
	 * @return \Crux\Type\Variant
	 * @throws \Crux\Core\Exception\Type\Variant
	 * @uses is_array()
	 * @uses \Crux\Core\Is::associativeArray()
	 * @uses \Crux\Type\Variant\Map::Factory()
	 * @uses \Crux\Type\Variant\List::Factory()
	 * @uses \Crux\Type\Variant\Scalar::Factory()
	 * @uses \Crux\Core\Is::string()
	 * @uses preg_match()
	 * @uses \Crux\Core\Is::scalar()
	 * @uses \Crux\Type\Variant\Scalar::__construct()
	 * @uses \Crux\Core\Is::object()
	 */
	public static function Factory($mixSource = null) : Variant
	{
		// Make sure we have a scalar
		if ($mixSource === null) {
			// We're done
			return new Variant\Scalar();
		} elseif (Is::associativeArray($mixSource)) {
			// Return a new instance of VariantMap
			return Variant\Map::fromMap($mixSource);
		} elseif (Is::sequentialArray($mixSource)) {
			// Return a new instance of VariantList
			return Variant\Vector::fromArray($mixSource);
		} elseif (Is::map($mixSource)) {
			// Return a new instance of VariantMap
			return Variant\Map::fromMap($mixSource);
		} elseif (Is::vector($mixSource)) {
			// Return a new instance of VariantList
			return Variant\Vector::fromVector($mixSource);
		} elseif (Is::variant($mixSource)) {
			// We're done, we already have a variant
			return $mixSource;
		} elseif (Is::string($mixSource) && preg_match('/^(true|false|on|off)$/', $mixSource)) {
			// Re-run the constructor
			return self::Factory(filter_var($mixSource, FILTER_VALIDATE_BOOLEAN));
		} elseif (Is::scalar($mixSource)) {
			// We're done
			return new Variant\Scalar($mixSource);
		} elseif (Is::object($mixSource)) {
			// Return a new instance of VariantMap
			return Variant\Map::fromObject($mixSource);
		} elseif (Is::resource($mixSource)) {
			// Return the new variant
			return new Variant\Scalar($mixSource);
		} else {
			// Throw an exception
			throw new Type\Variant('Unable to convert data type [%s] to Variant, VariantList or VariantMap.', gettype($mixSource));
		}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Implementations //////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/**
	 * This method returns the original invariant data
	 * @access public
	 * @name \Crux\Type\Variant::getData()
	 * @package \Crux\Type\Variant
	 * @return mixed
	 */
	abstract public function getData();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
} /// End Crux\Type\Variant Interface Definition /////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
